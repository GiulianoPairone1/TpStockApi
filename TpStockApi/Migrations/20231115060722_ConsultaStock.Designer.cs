// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TpStockApi.Data;

#nullable disable

namespace TpStockApi.Migrations
{
    [DbContext(typeof(ConsultaContext))]
    [Migration("20231115060722_ConsultaStock")]
    partial class ConsultaStock
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("EncargadoStockMovimiento", b =>
                {
                    b.Property<int>("EncargadoStockId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovimientosId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EncargadoStockId", "MovimientosId");

                    b.HasIndex("MovimientosId");

                    b.ToTable("EncargadoStockMovimiento");
                });

            modelBuilder.Entity("GerenteMovimiento", b =>
                {
                    b.Property<int>("GerenteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovimientoIncrementoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GerenteId", "MovimientoIncrementoId");

                    b.HasIndex("MovimientoIncrementoId");

                    b.ToTable("GerenteMovimiento");
                });

            modelBuilder.Entity("MovimientoVendedor", b =>
                {
                    b.Property<int>("MovimientoDecrementoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendedoresId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovimientoDecrementoId", "VendedoresId");

                    b.HasIndex("VendedoresId");

                    b.ToTable("MovimientoVendedor");
                });

            modelBuilder.Entity("TpStockApi.Data.Entities.Movimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movimiento");
                });

            modelBuilder.Entity("TpStockApi.Data.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 0,
                            Descripcion = "Leche larga vida",
                            NombreProducto = "Leche"
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 0,
                            Descripcion = "Arroz yamani",
                            NombreProducto = "Arroz"
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 0,
                            Descripcion = "harina luedante",
                            NombreProducto = "Harina"
                        });
                });

            modelBuilder.Entity("TpStockApi.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");
                });

            modelBuilder.Entity("TpStockApi.Data.Entities.EncargadoStock", b =>
                {
                    b.HasBaseType("TpStockApi.Data.Entities.User");

                    b.HasDiscriminator().HasValue("EncargadoStock");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "EmilioCerro@gmail.com",
                            FullName = "Emilio Cerro",
                            Password = "321321",
                            UserName = "E_Cerro"
                        });
                });

            modelBuilder.Entity("TpStockApi.Data.Entities.Gerente", b =>
                {
                    b.HasBaseType("TpStockApi.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Gerente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "MicaelaCassino@gmail.com",
                            FullName = "Micaela Caissno",
                            Password = "123123",
                            UserName = "M_Cassino"
                        });
                });

            modelBuilder.Entity("TpStockApi.Data.Entities.Vendedor", b =>
                {
                    b.HasBaseType("TpStockApi.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Vendedor");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "ValentinPAirone@gmail.com",
                            FullName = "Valentin Pairone",
                            Password = "123456",
                            UserName = "V_Pairone"
                        },
                        new
                        {
                            Id = 4,
                            Email = "MateoPAirone@gmail.com",
                            FullName = "Mateo Pairone",
                            Password = "654321",
                            UserName = "M_Pairone"
                        });
                });

            modelBuilder.Entity("EncargadoStockMovimiento", b =>
                {
                    b.HasOne("TpStockApi.Data.Entities.EncargadoStock", null)
                        .WithMany()
                        .HasForeignKey("EncargadoStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpStockApi.Data.Entities.Movimiento", null)
                        .WithMany()
                        .HasForeignKey("MovimientosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GerenteMovimiento", b =>
                {
                    b.HasOne("TpStockApi.Data.Entities.Gerente", null)
                        .WithMany()
                        .HasForeignKey("GerenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpStockApi.Data.Entities.Movimiento", null)
                        .WithMany()
                        .HasForeignKey("MovimientoIncrementoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovimientoVendedor", b =>
                {
                    b.HasOne("TpStockApi.Data.Entities.Movimiento", null)
                        .WithMany()
                        .HasForeignKey("MovimientoDecrementoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpStockApi.Data.Entities.Vendedor", null)
                        .WithMany()
                        .HasForeignKey("VendedoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
